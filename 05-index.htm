
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Calculator</title>
    <script src="redux.js"></script>
    <script src="react.development.js"></script>
    <script src="react-dom.development.js"></script>
    <script src="babel.min.js"></script>
    <script type="text/babel">
        class Calculator extends React.Component{
            state = {
                val1 :0,
                val2 :0,
                resultValue : 0

            }

            render(){
                const { value, addition, subtraction , multiplication, division } = this.props,
                    { val1 , val2  } = this.state
                   
                    //this.setState({resultValue:newProd})
                    
                return(
                    <div>
                        <h1>Calculator</h1>
                        <hr/>
                        <input type="number" name="" id="" onChange={ evt => this.setState({ val1 : parseInt(evt.target.value)})}/>
                        <input type="number" name="" id="" onChange={ evt => this.setState({ val2 : parseInt(evt.target.value)})}/>
                        <br/>
                        <input type="button" value="Add" onClick={() => addition(val1,val2)} />
                        <input type="button" value="Subtract" onClick={() => subtraction(val1,val2)}/>
                        <input type="button" value="Multiply" onClick={() => multiplication(val1,val2)}/>
                        <input type="button" value="Divide" onClick={() => division(val1,val2)}/>
                        <div>[{value}]</div>
                    </div>
                )
            }

        }

        function calculatorReducer(currentState = 0, action){
            if (action.type === 'ADD') return  (action.payload.startVal + action.payload.endVal || 1);
            if (action.type === 'SUBTRACT') return   (action.payload.startVal -action.payload.endVal || 1) ;
            if (action.type === 'MULTIPLY') return  (action.payload.startVal * action.payload.endVal || 1) ;
            if (action.type === 'DIVID') return  (action.payload.startVal / action.payload.endVal || 1) ;
            return currentState;
        }

        const calculatorActionCreators = {
            
            addition(startVal , endVal){
                const action = { type : 'ADD',  payload :{startVal,endVal}};
                return action;
            },
            subtraction(startVal , endVal){
                const action = { type : 'SUBTRACT',payload :{startVal,endVal} };
                return action;
            },
            multiplication(startVal , endVal){
                const action = { type : 'MULTIPLY', payload :{startVal,endVal} };
                return action;
            },
            division(startVal , endVal){
                const action = { type : 'DIVID', payload :{startVal,endVal}  };
                return action;
            }
        }

        const store = Redux.createStore(calculatorReducer);

        const calculatorActionDispatchers = Redux.bindActionCreators(calculatorActionCreators, store.dispatch);

        function renderCalculator(){
            
            const value = store.getState();

            ReactDOM.render(
                <Calculator value={value} {...calculatorActionDispatchers} />
            , document.getElementById('root'));
        }
        renderCalculator();
        store.subscribe(renderCalculator);

    </script>
</head>
<body>
        <div id="root">
        </div>
</body>
</html>